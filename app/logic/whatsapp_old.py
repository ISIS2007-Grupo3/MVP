from app.models.whatsapp_webhook import WebhookPayload, Message
from app.services.whatsapp_message_service import WhatsAppMessageService
from app.services.whatsapp_flow_service import WhatsAppFlowService
import app.logic.sesion as sesion

def handle_message(payload: WebhookPayload, db):
    """
    Entrada principal para procesar mensajes
    """
    msg = payload.get_mensaje()
    if not msg or not msg.text:
        return None
    
    # Inicializar servicios
    message_service = WhatsAppMessageService(db)
    flow_service = WhatsAppFlowService(db)
    
    usuario = handle_auth(msg, db, message_service)
    if not usuario:
        return None
    
    # Solo procesar si el usuario est√° completamente registrado
    if usuario.estado_registro == "completo":
        handle_user_interaction(msg, usuario, db, message_service, flow_service)
    
    return usuario

def handle_auth(msg: Message, db):
    """
    Maneja autenticaci√≥n y registro de usuarios
    """
    usuario = sesion.obtener_usuario(msg.from_, db)
    
    # Usuario no existe
    if not usuario:
        return handle_nuevo_usuario(msg.from_, db)
    
    # Usuario existe pero no complet√≥ registro
    if usuario.estado_registro != "completo":
        return handle_usuario_nombre(msg, db)
    
    return usuario

def handle_nuevo_usuario(user_id: str, db):
    """
    Inicia el proceso de registro para nuevos usuarios
    """
    sesion.crear_usuario(user_id, db)
    send_message(user_id, "¬°Hola! Bienvenido a la plataforma de cupos de parqueaderos!")
    send_message(user_id, "Parece que no est√°s registrado. Por favor, env√≠a tu nombre para registrarte.")
    sesion.actualizar_estado_registro(user_id, "esperando_nombre", db)
    return None

def handle_usuario_nombre(msg: Message, db):
    """
    Completa el proceso de registro con el nombre del usuario
    """
    usuario = sesion.obtener_usuario(msg.from_, db)
    
    if usuario.estado_registro == "esperando_nombre":
        sesion.actualizar_nombre(msg.from_, msg.text.body, db)
        usuario = sesion.obtener_usuario(msg.from_, db)
        send_message(msg.from_, f"Gracias {usuario.name}, ahora est√°s registrado. Escribe cualquier mensaje para continuar.")
        sesion.actualizar_estado_registro(msg.from_, "completo", db)
        sesion.actualizar_estado_chat(msg.from_, "inicial", db)
        return usuario
    
    return None

def handle_user_interaction(msg: Message, usuario, db):
    """
    Maneja la interacci√≥n principal con usuarios registrados
    """
    text = msg.text.body.lower().strip()
    
    if usuario.estado_chat.paso_actual == "inicial":
        send_message(msg.from_, f"Hola de nuevo {usuario.name} üëãüöò!")
    
    if usuario.rol == "conductor":
        handle_conductor(text, msg.from_, db)
    elif usuario.rol == "gestor_parqueadero":
        handle_gestor(text, msg.from_, db)
    else:
        send_message(msg.from_, "Rol no reconocido. Contacta soporte.")

def handle_conductor(text, user_id, db):
    """
    Maneja el flujo espec√≠fico para conductores
    """
    usuario = sesion.obtener_usuario(user_id, db)
    current_step = usuario.estado_chat.paso_actual
    
    # Comandos especiales que funcionan en cualquier momento
    if text.lower().startswith("desuscribir"):
        handle_desuscribir_comando(text, user_id, db)
        return
    
    # Mostrar men√∫ si est√° en estado inicial o si solicita el men√∫
    if current_step == "inicial" or text in ["menu", "men√∫"]:
        mostrar_menu_conductor(user_id, db)
        return
    
    # Procesar opciones del men√∫ principal
    if current_step == "esperando_opcion_menu":
        handle_conductor_menu_option(text, user_id, db)
        return
    
    # Procesar opciones del men√∫ de suscripciones
    if current_step == "esperando_opcion_suscripcion":
        handle_suscripcion_menu_option(text, user_id, db)
        return
    
    # Procesar selecci√≥n de parqueadero para suscripci√≥n
    if current_step == "esperando_seleccion_parqueadero":
        handle_seleccion_parqueadero_suscripcion(text, user_id, db)
        return
    
    # Si no est√° en ning√∫n flujo espec√≠fico, mostrar men√∫
    mostrar_menu_conductor(user_id, db)

def mostrar_menu_conductor(user_id, db):
    """
    Muestra el men√∫ principal para conductores
    """
    
    menu = """üöó Men√∫ Conductor:
Selecciona una de las siguientes opciones:

1Ô∏è‚É£ Ver parqueaderos disponibles
2Ô∏è‚É£ Suscribirse a notificaciones
3Ô∏è‚É£ Salir

Escribe el n√∫mero de la opci√≥n que deseas:"""
    
    send_message(user_id, menu)
    sesion.actualizar_estado_chat(user_id, "esperando_opcion_menu", db)

def handle_conductor_menu_option(text, user_id, db):
    """
    Procesa las opciones del men√∫ de conductor
    """
    if text == "1":
        handle_ver_parqueaderos(user_id, db)
    elif text == "2":
        handle_suscripcion_notificaciones(user_id, db)
    elif text == "3":
        handle_salir(user_id, db)
    else:
        send_message(user_id, "‚ùå Opci√≥n inv√°lida. Por favor, selecciona 1, 2 o 3.")
        mostrar_menu_conductor(user_id, db)

def handle_ver_parqueaderos(user_id, db):
    """
    Maneja la consulta de parqueaderos disponibles
    """
    send_message(user_id, "üÖøÔ∏è Consultando parqueaderos disponibles...")
    # Aqu√≠ ir√≠a la logica para consultar parqueaderos
    parqueaderos = obtener_parqueaderos_con_cupos(db)
    if parqueaderos:
        mensaje = "*Parqueaderos con cupos disponibles:*\n"
        for p in parqueaderos:
            mensaje += f"- *{p.name}* \n  Ubicaci√≥n: {p.ubicacion} \n  Capacidad: {p.capacidad} \n  Ultima actualizaci√≥n: {p.ultima_actualizacion} \n\n"
        send_message(user_id, mensaje)
    else:
        send_message(user_id, "No hay parqueaderos con cupos disponibles en este momento.")
    mostrar_menu_conductor(user_id, db)

def handle_suscripcion_notificaciones(user_id, db):
    """
    Maneja la suscripci√≥n a notificaciones
    """
    send_message(user_id, """üîî *Notificaciones de Parqueaderos*

Selecciona una opci√≥n:

1Ô∏è‚É£ Suscribirme a todos los parqueaderos
2Ô∏è‚É£ Ver parqueaderos para suscripci√≥n espec√≠fica
3Ô∏è‚É£ Ver mis suscripciones actuales
4Ô∏è‚É£ Desuscribirme de todas las notificaciones
5Ô∏è‚É£ Volver al men√∫ principal

Escribe el n√∫mero de tu opci√≥n:""")
    
    sesion.actualizar_estado_chat(user_id, "esperando_opcion_suscripcion", db)

def handle_suscripcion_menu_option(text, user_id, db):
    """
    Procesa las opciones del men√∫ de suscripciones
    """
    notification_service = NotificationService(db)
    
    if text == "1":
        # Suscribirse a todos los parqueaderos
        result = notification_service.suscribir_conductor(user_id, None)
        if result["success"]:
            send_message(user_id, "‚úÖ Te has suscrito a notificaciones de *todos* los parqueaderos!")
        else:
            send_message(user_id, f"‚ùå Error: {result['message']}")
        mostrar_menu_conductor(user_id, db)
        
    elif text == "2":
        # Mostrar parqueaderos para suscripci√≥n espec√≠fica
        mostrar_parqueaderos_para_suscripcion(user_id, db)
        
    elif text == "3":
        # Ver suscripciones actuales
        mostrar_suscripciones_actuales(user_id, db)
        
    elif text == "4":
        # Desuscribirse de todas
        result = notification_service.desuscribir_conductor(user_id, None)
        if result["success"]:
            send_message(user_id, "‚ùå Te has desuscrito de todas las notificaciones")
        else:
            send_message(user_id, f"‚ùå Error: {result['message']}")
        mostrar_menu_conductor(user_id, db)
        
    elif text == "5":
        # Volver al men√∫ principal
        mostrar_menu_conductor(user_id, db)
        
    else:
        send_message(user_id, "‚ùå Opci√≥n inv√°lida. Por favor, selecciona 1, 2, 3, 4 o 5.")
        handle_suscripcion_notificaciones(user_id, db)

def mostrar_parqueaderos_para_suscripcion(user_id, db):
    """
    Muestra los parqueaderos disponibles para suscripci√≥n
    """
    from app.repositories.parqueadero_repository import ParqueaderoRepository
    parqueadero_repo = ParqueaderoRepository(db)
    parqueaderos = parqueadero_repo.find_all()
    
    if parqueaderos:
        mensaje = "*Parqueaderos disponibles:*\n\n"
        for i, p in enumerate(parqueaderos, 1):
            mensaje += f"{i}Ô∏è‚É£ *{p.name}*\n   üìç {p.ubicacion}\n\n"
        mensaje += f"{len(parqueaderos) + 1}Ô∏è‚É£ Volver al men√∫ de suscripciones\n\n"
        mensaje += "Escribe el n√∫mero del parqueadero al que te quieres suscribir:"
        
        send_message(user_id, mensaje)
        
        # Guardar lista de parqueaderos en sesi√≥n para referencia
        sesion.actualizar_contexto_temporal(user_id, {"parqueaderos": [p.id for p in parqueaderos]}, db)
        sesion.actualizar_estado_chat(user_id, "esperando_seleccion_parqueadero", db)
    else:
        send_message(user_id, "‚ùå No hay parqueaderos disponibles")
        handle_suscripcion_notificaciones(user_id, db)

def handle_seleccion_parqueadero_suscripcion(text, user_id, db):
    """
    Maneja la selecci√≥n de parqueadero para suscripci√≥n
    """
    try:
        opcion = int(text)
        usuario = sesion.obtener_usuario(user_id, db)
        contexto = getattr(usuario.estado_chat, 'contexto_temporal', {})
        parqueaderos_ids = contexto.get('parqueaderos', [])
        
        if opcion == len(parqueaderos_ids) + 1:
            # Volver al men√∫ de suscripciones
            handle_suscripcion_notificaciones(user_id, db)
            return
            
        if 1 <= opcion <= len(parqueaderos_ids):
            parqueadero_id = parqueaderos_ids[opcion - 1]
            notification_service = NotificationService(db)
            result = notification_service.suscribir_conductor(user_id, parqueadero_id)
            
            if result["success"]:
                send_message(user_id, "‚úÖ ¬°Suscripci√≥n exitosa! Recibir√°s notificaciones cuando haya cupos disponibles.")
            else:
                send_message(user_id, f"‚ùå Error: {result['message']}")
        else:
            send_message(user_id, "‚ùå Opci√≥n inv√°lida")
            
    except ValueError:
        send_message(user_id, "‚ùå Por favor, env√≠a un n√∫mero v√°lido")
    
    mostrar_menu_conductor(user_id, db)

def mostrar_suscripciones_actuales(user_id, db):
    """
    Muestra las suscripciones actuales del conductor
    """
    notification_service = NotificationService(db)
    suscripciones = notification_service.listar_suscripciones_conductor(user_id)
    
    if suscripciones:
        mensaje = "*Tus suscripciones actuales:*\n\n"
        for i, suscripcion in enumerate(suscripciones, 1):
            if suscripcion["tipo"] == "global":
                mensaje += f"{i}Ô∏è‚É£ üåê Todos los parqueaderos\n"
            else:
                mensaje += f"{i}Ô∏è‚É£ üÖøÔ∏è {suscripcion['parqueadero']}\n"
            mensaje += f"   üìÖ Desde: {suscripcion['fecha']}\n\n"
        
        mensaje += "Para desuscribirte, escribe 'desuscribir' seguido del n√∫mero o 'desuscribir todo'"
    else:
        mensaje = "‚ùå No tienes suscripciones activas"
    
    send_message(user_id, mensaje)
    mostrar_menu_conductor(user_id, db)

def handle_desuscribir_comando(text, user_id, db):
    """
    Maneja comandos de desuscripci√≥n desde cualquier punto de la conversaci√≥n
    Ejemplos: "desuscribir", "desuscribir todo", "desuscribir 1"
    """
    notification_service = NotificationService(db)
    
    # Limpiar el comando y extraer par√°metros
    comando_parts = text.lower().split()
    
    if len(comando_parts) == 1:  # Solo "desuscribir"
        # Mostrar suscripciones actuales para que elija
        suscripciones = notification_service.listar_suscripciones_conductor(user_id)
        
        if not suscripciones:
            send_message(user_id, "‚ùå No tienes suscripciones activas")
            return
            
        mensaje = "*Tus suscripciones actuales:*\n\n"
        for i, suscripcion in enumerate(suscripciones, 1):
            if suscripcion["tipo"] == "global":
                mensaje += f"{i}Ô∏è‚É£ üåê Todos los parqueaderos\n"
            else:
                mensaje += f"{i}Ô∏è‚É£ üÖøÔ∏è {suscripcion['parqueadero']}\n"
        
        mensaje += "\nEscribe 'desuscribir todo' o 'desuscribir [n√∫mero]' para desuscribirte"
        send_message(user_id, mensaje)
        
    elif len(comando_parts) == 2:
        if comando_parts[1] == "todo":
            # Desuscribir de todo
            result = notification_service.desuscribir_conductor(user_id, None)
            send_message(user_id, "‚úÖ Te has desuscrito de todas las notificaciones")
        else:
            try:
                # Desuscribir de suscripci√≥n espec√≠fica por n√∫mero
                numero = int(comando_parts[1])
                suscripciones = notification_service.listar_suscripciones_conductor(user_id)
                
                if 1 <= numero <= len(suscripciones):
                    # Aqu√≠ necesitar√≠as m√°s l√≥gica para identificar el parqueadero espec√≠fico
                    # Por simplicidad, desuscribir de todo si es global
                    suscripcion = suscripciones[numero - 1]
                    if suscripcion["tipo"] == "global":
                        result = notification_service.desuscribir_conductor(user_id, None)
                        send_message(user_id, "‚úÖ Te has desuscrito de las notificaciones globales")
                    else:
                        send_message(user_id, "Para desuscribirte de parqueaderos espec√≠ficos, usa el men√∫ de suscripciones")
                else:
                    send_message(user_id, "‚ùå N√∫mero de suscripci√≥n inv√°lido")
            except ValueError:
                send_message(user_id, "‚ùå Comando inv√°lido. Usa 'desuscribir todo' o 'desuscribir [n√∫mero]'")
    else:
        send_message(user_id, "‚ùå Comando inv√°lido. Usa 'desuscribir', 'desuscribir todo' o 'desuscribir [n√∫mero]'")

def handle_gestor(text, user_id, db):
    """
    Maneja el flujo espec√≠fico para gestores de parqueaderos
    """
    usuario = sesion.obtener_usuario(user_id, db)
    current_step = usuario.estado_chat.paso_actual
    
    # Mostrar men√∫ si est√° en estado inicial o si solicita el men√∫
    if current_step == "inicial" or text in ["menu", "men√∫"]:
        mostrar_menu_gestor(user_id, db)
        return
    
    # Procesar opciones del men√∫
    if current_step == "esperando_opcion_menu":
        handle_gestor_menu_option(text, user_id, db)
        return
    
    if current_step == "esperando_cambio_cupos":
        handle_cupos_gestor(text, user_id, db)
        return
    
    # Si no est√° en ning√∫n flujo espec√≠fico, mostrar men√∫
    mostrar_menu_gestor(user_id, db)
    
def mostrar_menu_gestor(user_id,db):
    """
    Muestra el menu para los gestores de parqueaderos
    """
    menu = """üÖøÔ∏èüöò Men√∫ Gestor de Parqueaderos:
Selecciona una de las siguientes opciones:

1Ô∏è‚É£ Gestionar cupos libres publicados
2Ô∏è‚É£ Salir

Escribe el n√∫mero de la opci√≥n que deseas:"""
    
    send_message(user_id, menu)
    sesion.actualizar_estado_chat(user_id, "esperando_opcion_menu", db)
    
def handle_gestor_menu_option(text, user_id, db):
    """
    Procesa las opciones del menu de gestor
    """
    if text == "1":
        mostrar_menu_cupos_gestor(user_id, db)
    elif text == "2":
        handle_salir(user_id, db)
    else:
        send_message(user_id, "‚ùå Opci√≥n inv√°lida. Por favor, selecciona 1 o 2.")
        mostrar_menu_gestor(user_id, db)
        
def mostrar_menu_cupos_gestor(user_id, db):
    """
    Muestra el menu para actualizar cupos de los gestores de parqueaderos
    """
    menu = """üÖøÔ∏èüöò Gestionar cupos del parqueadero:
Selecciona una de las siguientes opciones:

1Ô∏è‚É£ No hay cupo
2Ô∏è‚É£ Hay 1-5 cupos
3Ô∏è‚É£ Hay m√°s de 5 cupos
4Ô∏è‚É£ Volver

Escribe el n√∫mero de la opci√≥n que deseas:"""
    
    send_message(user_id, menu)
    sesion.actualizar_estado_chat(user_id, "esperando_cambio_cupos", db)
    
def handle_cupos_gestor(text, user_id, db):
    """
    Procesa las opciones del menu para actualizar los cupos de un parqueadero
    """
    if text not in "1234":
        send_message(user_id, "‚ùå Opci√≥n inv√°lida. Por favor, selecciona 1, 2, 3 o 4.")
        mostrar_menu_gestor(user_id, db)
        return
    
    cupos_libres = "No hay cupo"
    tiene_cupo = False
    
    if text == "2":
        cupos_libres = "Hay 1-5 cupos"
        tiene_cupo = True
    elif text == "3":
        cupos_libres = "Hay m√°s de 5 cupos"
        tiene_cupo = True
    if text != "4":
        exito = actualizar_cupos_parqueadero(user_id, cupos_libres, tiene_cupo, db)
        
        if exito:
            send_message(user_id, "Se actualizaron los cupos del parqueadero üòÄ")
        else:
            send_message(user_id, "Ocurri√≥ un error, int√©ntalo de nuevo")
            
    mostrar_menu_gestor(user_id, db)
        
def handle_salir(user_id, db):
    """
    Maneja la salida del usuario
    """
    send_message(user_id, "üëã ¬°Gracias por usar el servicio! Escribe cualquier mensaje para volver.")
    sesion.actualizar_estado_chat(user_id, "inicial", db)